// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"

	"code.cloudfoundry.org/diego-stress-tests/cedar/cli"
	"code.cloudfoundry.org/lager"
	"golang.org/x/net/context"
)

type FakeCFClient struct {
	CfStub        func(logger lager.Logger, ctx context.Context, timeout time.Duration, args ...string) ([]byte, error)
	cfMutex       sync.RWMutex
	cfArgsForCall []struct {
		logger  lager.Logger
		ctx     context.Context
		timeout time.Duration
		args    []string
	}
	cfReturns struct {
		result1 []byte
		result2 error
	}
	cfReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	CleanupStub        func(ctx context.Context)
	cleanupMutex       sync.RWMutex
	cleanupArgsForCall []struct {
		ctx context.Context
	}
	PoolStub        func() chan string
	poolMutex       sync.RWMutex
	poolArgsForCall []struct{}
	poolReturns     struct {
		result1 chan string
	}
	poolReturnsOnCall map[int]struct {
		result1 chan string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) Cf(logger lager.Logger, ctx context.Context, timeout time.Duration, args ...string) ([]byte, error) {
	fake.cfMutex.Lock()
	ret, specificReturn := fake.cfReturnsOnCall[len(fake.cfArgsForCall)]
	fake.cfArgsForCall = append(fake.cfArgsForCall, struct {
		logger  lager.Logger
		ctx     context.Context
		timeout time.Duration
		args    []string
	}{logger, ctx, timeout, args})
	fake.recordInvocation("Cf", []interface{}{logger, ctx, timeout, args})
	fake.cfMutex.Unlock()
	if fake.CfStub != nil {
		return fake.CfStub(logger, ctx, timeout, args...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.cfReturns.result1, fake.cfReturns.result2
}

func (fake *FakeCFClient) CfCallCount() int {
	fake.cfMutex.RLock()
	defer fake.cfMutex.RUnlock()
	return len(fake.cfArgsForCall)
}

func (fake *FakeCFClient) CfArgsForCall(i int) (lager.Logger, context.Context, time.Duration, []string) {
	fake.cfMutex.RLock()
	defer fake.cfMutex.RUnlock()
	return fake.cfArgsForCall[i].logger, fake.cfArgsForCall[i].ctx, fake.cfArgsForCall[i].timeout, fake.cfArgsForCall[i].args
}

func (fake *FakeCFClient) CfReturns(result1 []byte, result2 error) {
	fake.CfStub = nil
	fake.cfReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CfReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.CfStub = nil
	if fake.cfReturnsOnCall == nil {
		fake.cfReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.cfReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) Cleanup(ctx context.Context) {
	fake.cleanupMutex.Lock()
	fake.cleanupArgsForCall = append(fake.cleanupArgsForCall, struct {
		ctx context.Context
	}{ctx})
	fake.recordInvocation("Cleanup", []interface{}{ctx})
	fake.cleanupMutex.Unlock()
	if fake.CleanupStub != nil {
		fake.CleanupStub(ctx)
	}
}

func (fake *FakeCFClient) CleanupCallCount() int {
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return len(fake.cleanupArgsForCall)
}

func (fake *FakeCFClient) CleanupArgsForCall(i int) context.Context {
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return fake.cleanupArgsForCall[i].ctx
}

func (fake *FakeCFClient) Pool() chan string {
	fake.poolMutex.Lock()
	ret, specificReturn := fake.poolReturnsOnCall[len(fake.poolArgsForCall)]
	fake.poolArgsForCall = append(fake.poolArgsForCall, struct{}{})
	fake.recordInvocation("Pool", []interface{}{})
	fake.poolMutex.Unlock()
	if fake.PoolStub != nil {
		return fake.PoolStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.poolReturns.result1
}

func (fake *FakeCFClient) PoolCallCount() int {
	fake.poolMutex.RLock()
	defer fake.poolMutex.RUnlock()
	return len(fake.poolArgsForCall)
}

func (fake *FakeCFClient) PoolReturns(result1 chan string) {
	fake.PoolStub = nil
	fake.poolReturns = struct {
		result1 chan string
	}{result1}
}

func (fake *FakeCFClient) PoolReturnsOnCall(i int, result1 chan string) {
	fake.PoolStub = nil
	if fake.poolReturnsOnCall == nil {
		fake.poolReturnsOnCall = make(map[int]struct {
			result1 chan string
		})
	}
	fake.poolReturnsOnCall[i] = struct {
		result1 chan string
	}{result1}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cfMutex.RLock()
	defer fake.cfMutex.RUnlock()
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	fake.poolMutex.RLock()
	defer fake.poolMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cli.CFClient = new(FakeCFClient)
